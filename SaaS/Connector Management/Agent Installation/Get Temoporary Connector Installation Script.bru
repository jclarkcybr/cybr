meta {
  name: Get Temoporary Connector Installation Script
  type: http
  seq: 1
}

post {
  url: https://{{identityTenantName}}.connectormanagement.cyberark.cloud/api/setup-script
  body: json
  auth: none
}

body:json {
  {
    "osType": "windows",
    "version": "stable",
    "installationPath": "C:\\program files (x86)\\CyberArk\\"
  }
}

assert {
  res.status: eq 200
  res.body: isJson
  res.body.script: isString
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
}

script:post-response {
  const tools = require('./tools/tools');
  
  // Log on error
  if (res.status != 200) {
    if (res.body.code) {
      tools.log('Code: ' + res.body.code);
    }
    if (res.body.message) {
      tools.log('Message: ' + res.body.message);
    }
    if (res.body.description) {
      tools.log('Description: ' + res.body.description);
    }
    if (res.body.details) {
      tools.log('Details: ' + res.body.details);
    }
  }
}

docs {
  ## Get Temporary Connector INstallation Script
  Creates a temporary script for installing an agent
  
  ## URL
  https://<subdomain>.connectormanagement.cyberark.com/api/setup-script
  
  ### Resource Information
  | HTTP Method | GET |
  | :-- | :-- |
  | Content Type | application/json  |
  
  ### Header Parameters
  | Parameter | Description |
  | :-- | :-- |
  | Authorization | The token that identifies the session, encoded in BASE 64.  |
  
  ### Request Body
  ```
  {
    "osType": "windows",
    "version": "stable",
    "installationPath": "string",
    "connectorPoolId": "string", // Optional
    "proxyDetails": {            // Optional
      "proxyAddress": "string",
      "proxyPort": 65535
    }
  }
  ```
  
  ## Example Responses
  
  ### *Status Code 200*
  ```
  {
    "script": "string"
  }
  ```
  
  ### *Status Codes 400, 401, 404, and 500*
  ```
  {
    "code": "string",
    "message": "string",
    "description": "",
    "details": ""
  }
  ```
}
