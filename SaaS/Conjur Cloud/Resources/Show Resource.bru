meta {
  name: Show Resource
  type: http
  seq: 2
}

get {
  url: https://{{identityTenantName}}.secretsmgr.cyberark.cloud/api/resources/conjur/{{kind}}/{{identifier}}
  body: formUrlEncoded
  auth: none
}

query {
  ~offset: 
  ~count: 
  ~acting_as: 
  ~search: 
}

vars:pre-request {
  kind: host
  identifier: data%2Fapi-test-account
}

assert {
  res.status: eq 200
  res.body: isJson
}

script:pre-request {
  const conjurTokenAuth = require('./tools/conjurTokenAuth');
  
  // Perform authentication usings conjurTokenAuth.js tools
  await conjurTokenAuth.conjurLogin();
}

docs {
  ## Show a resource
  The response to this method is a JSON document describing a single resource.
  
  ### URL
  https://<subdomain>.secretsmgr.cyberark.com/api/resources/conjur/{kind}/{identifier}
  
  ### Resource Information
  | HTTP Method | GET |
  | :-- | :-- |
  
  ### Kinds of Resources
  | Kind | Description |
  | :-- | :-- | 
  | User | One unique human | 
  | Host | A single logical machine (in the broad sense, not just physical) | 
  | Layer | A collection of hosts that have the same privileges |
  | Group | A collection of users and groups that have the same privileges |
  | Policy | Privileges on policies enable a user to create and modify objects and permissions | 
  | Variable | A secret such as a password, API key, SSH key, etc. |
  | Webservice | An HTTP(S) web service which performs sensitive operations |
  
  > *NOTE:* Entity IDs must be *URL-encoded*
  
  ### URI
  > GET /api/resources/conjur/{kind}/{identifier}
  
  #### URI Parameters
  | Parameter | Type | Mandatory | Description |
  | :-- | :-- | :-- | :-- |
  | kind | string | yes | The kind of resource to test **Example:** variable |
  | identifier | string | yes | The identifier of the resource to test **Example:** data/vault/prod-safe/app-prod/db-password|
  
  #### URL-Encoded Examples
  | Identifier | URL-encoded |
  | :-- | :-- |
  | data/myapp-01 | data%2Fmyapp-01 |
  | alice@example.com | alice%40example.com |
  | data/prod/aws/db-password | data%2Fprod%2Faws%2Fdb-password |
  | data/research+development | data%2Fresearch%2Bdevelopment |
  | data/sales&marketing | data%2Fsales%26marketing|
  
  ### Example Responses
  #### Success
  ```
  {
    "created_at": "2024-09-30T17:26:24.527+00:00",
    "id": "conjur:host:data/api-test-account",
    "owner": "conjur:policy:data",
    "policy": "conjur:policy:data",
    "permissions": [],
    "annotations": [
      {
        "name": "authn/api-key",
        "value": "true",
        "policy": "conjur:policy:data"
      },
      {
        "name": "type",
        "value": "Other",
        "policy": "conjur:policy:data"
      }
    ],
    "restricted_to": []
  }
  ```
  #### Error
  ```
  {
    "status": "error",
    "error": "#<Errors::Authentication::Security::WebserviceNotFound: CONJ00005E Webservice 'authn-azure/status' not found>"
  }
  ```
  
  ### Status Codes 
  | Code | Description |
  | :-- | :-- |
  | 200 | Role memberships returned as a JSON list |
  | 401 | Not Authorized - The request lacks valid authentication credentials | 
  | 403 | The authenticated user lacks the necessary privilege |
  | 404 | The requested resource does not exist |
}
