meta {
  name: Create Issuer
  type: http
  seq: 2
}

post {
  url: https://{{identityTenantName}}.secretsmgr.cyberark.cloud/api/issuers/conjur
  body: json
  auth: none
}

body:json {
  {
    "id":"bruno-aws-issuer",
    "max_ttl": 3600,
    "type": "aws",
    "data": {
      "access_key_id": "AKIAIOSFODNN7EXAMPLE",
      "secret_access_key": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    }
  }
}

script:pre-request {
  const conjurTokenAuth = require('./tools/conjurTokenAuth');
  
  // Perform authentication usings conjurTokenAuth.js tools
  await conjurTokenAuth.conjurLogin();
}

script:post-response {
  const tools = require('./tools/tools');
  
  // Log on error
  if (res.status != 201) {
    if (res.body.error.code) {
      tools.log('Error Code: ' + res.body.error.code);
    }
    if (res.body.error.message) {
      tools.log('Error Message: ' + res.body.error.message);
    }
    if (res.body.error.target) {
      tools.log('Error Target: ' + res.body.error.target);
    }
    if (res.body.error.details) {
      if (res.body.error.details.code) {
        tools.log('Error Details - Code: ' + res.body.error.details.code);
      }
      if (res.body.error.details.target) {
        tools.log('Error Details - Target: ' + res.body.error.details.target);
      }
      if (res.body.error.details.message) {
        tools.log('Error Details - Message: ' + res.body.error.details.message);
      }
    }
  }
}

docs {
  ## Create issuer
  This API creates an issuer.
  
  ### URL
  https://<subdomain>.secretsmgr.cyberark.com/api/api/issuers/conjur
  
  #### Resource Information
  | HTTP Method | POST |
  | :-- | :-- |
  
  #### URL Parameters
  None
  
  #### Example URI
  > POST https://<subdomain>.secretsmgr.cyberark.com/api/api/issuers/conjur
  
  ### Request Details
  #### Request Body
  A JSON object that includes the following parameters:
  > **NOTE**
  > - The PUT method replaces all of the secret's original parameters with a new set of parameters defined in this JSON object. Only the secret's name remains unchanged.
  
  | Parameter | Type | Mandatory | Description | 
  | :-- | :-- | :-- | :-- |
  | id| string | yes | The identity of the issuer. **Allowed characters:** A-Z, a-z, 0-9, + (plus), - (minus), _ (underscore). **Note:** Spaces are not allowed. **Example:** my-aws-issuer |
  | max_ttl | integer | yes | The maximum allowed validity (time-to-live), in seconds, for dynamic secrets created under this issuer. **Minimum:** 900 (15 min). **Maximum:** 43,200 (12 hrs). **Example:** 3600 (1 hr)|
  | type | array of JSON objects | no | The type of issuer - dynamic secrets of this type are created under this issuer. **Allowed values:** aws |
  | data | JSON object | yes |  |
  
  ### Response Details
  #### Status Codes 
  | Code | Description |
  | :-- | :-- |
  | 201 | The issuer was successfully created |
  | 400 | Invalid Request |
  | 403 | The authenticated user doesn't have the necessary permission to perform this action |
  | 409 | Issuer already exists | 
  | 500 | Internal server error |
  
  #### 201 Created
  ```
  {
    "id": "bruno-aws-issuer",
    "max_ttl": 3600,
    "type": "aws",
    "data": {
      "access_key_id": "AKIAIOSFODNN7EXAMPLE",
      "secret_access_key": "*****"
    },
    "created_at": "2024-10-17T16:52:14.271+00:00",
    "modified_at": "2024-10-17T16:52:14.277+00:00"
  }
  ```
  
  #### 400 Bad Request
  ```
  {
    "error": {
      "code": "bad_request",
      "message": "issuer type is unsupported"
    }
  }
  ```
  
  #### 409 Conflict
  ```
  {
    "error": {
      "code": "conflict",
      "message": "issuer 'bruno-aws-issuer' already exists",
      "target": "issuer",
      "details": {
        "code": "conflict",
        "target": "id",
        "message": "bruno-aws-issuer"
      }
    }
  }
  ```
}
