meta {
  name: Update Dynamic Secret
  type: http
  seq: 3
}

put {
  url: https://{{identityTenantName}}.secretsmgr.cyberark.cloud/api/secrets/dynamic/{{branch}}/{{secret-name}}
  body: json
  auth: none
}

headers {
  Accept: application/x.secretsmgr.v2+json
}

body:json {
  {
    "issuer": "my-aws-issuer",
    "ttl": 900,
    "method": "federation-token",
    "method_params": {
      "region": "us-east-1",
      "inline_policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInstances\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}"
    },
    "annotations": [
      {
        "name": "description",
        "value": "updated annotation"
      }
    ],
    "permissions": [
      {
        "subject": {
          "id": "data/bruno/api-testing/api-testing-host-group",
          "kind": "group"
        },
        "privileges": [
          "read"
        ]
      }
    ]
  }
}

vars:pre-request {
  branch: data%2Fdynamic
  secret-name: api-dyn-secret
}

assert {
  res.body: isJson
  res.status: eq 200
}

script:pre-request {
  const conjurTokenAuth = require('./tools/conjurTokenAuth');
  
  // Perform authentication usings conjurTokenAuth.js tools
  await conjurTokenAuth.conjurLogin();
}

script:post-response {
  const tools = require('./tools/tools');
  
  // Log on error
  if (res.status != 200) {
    if (res.body.error.code) {
      tools.log('Error Code: ' + res.body.error.code);
    }
    if (res.body.error.message) {
      tools.log('Error Message: ' + res.body.error.message);
    }
    if (res.body.error.target) {
      tools.log('Error Target: ' + res.body.error.target);
    }
    if (res.body.error.details) {
      if (res.body.error.details.code) {
        tools.log('Error Details - Code: ' + res.body.error.details.code);
      }
      if (res.body.error.details.target) {
        tools.log('Error Details - Target: ' + res.body.error.details.target);
      }
      if (res.body.error.details.message) {
        tools.log('Error Details - Message: ' + res.body.error.details.message);
      }
    }
  }
}

docs {
  ## Update a dynamic secret
  Update a dynamic secret resource in Conjur Cloud.
  
  ### URL
  https://<subdomain>.secretsmgr.cyberark.com/api/secrets/dynamic/{branch}/{secret-name}
  
  #### Resource Information
  | HTTP Method | PUT |
  | :-- | :-- |
  
  #### URL Parameters
  None
  
  #### Example URI
  > PUT https://<subdomain>.secretsmgr.cyberark.cloud/api/secrets/dynamic/data/dynamic/app-dyn-secret
  
  ### Request
  #### Request Header
  Must include the following Accept request header, which indicates that the API belongs to Conjur Cloud API v2, and that the body is a JSON object
  | Request Header | Field Definition |
  | :-- | :-- |
  | Accept | application/x.secretsmgr.v2+json |
  
  #### URI Path Parameters
  | Parameter | Type | Mandatory | Description | 
  | :-- | :-- | :-- | :-- |
  | branch | string | yes |	The policy branch under which the dynamic secret resides. Branch always starts with data/dynamic/. *Any path included in the URL must be URL-encoded to be recognized by the Conjur Cloud API.* | 
  | secret-name | string | yes | The identity (name) of the dynamic secret | 
  
  #### Request Body
  A JSON object that includes the following parameters:
  > **NOTE**
  > - The PUT method replaces all of the secret's original parameters with a new set of parameters defined in this JSON object. Only the secret's name remains unchanged.
  | Parameter | Type | Mandatory | Description | 
  | :-- | :-- | :-- | :-- | 
  | issuer | string | yes | The ID of the issuer that the dynamic secret resource should use to create the dynamic secret. See Issuer for dynamic secrets. |
  | ttl | integer | no | The amount of time (time-to-live) (in seconds) after which the dynamic secret becomes invalid. Minimum value: 900. Maximum: Must not exceed the maximum TTL value defined in the issuer that you have specified. **Note:** If you don't specify a TTL, the dynamic secret's TTL defaults to the maximum TTL defined in the specified issuer. |
  | method | string | yes | The method used to create the dynamic secret. Allowed values for AWS dynamic secrets: **federation-token** - The dynamic secrets is created in AWS using the federation token method. **assume-role** - The dynamic secrets is created in AWS using the assumed role method. Requires also the ARN of the IAM role being assumed - see the role_arn method parameter below.
  | method_params | array of JSON objects | no | Additional parameters required by the issuer for creating the AWS dynamic secret. **role_arn** - Required when method is assume-role, provide the ARN of the IAM role to assume. Not relevant for federation-token. **region** - The AWS region where the dynamic secrets should be created. **inline_policy** - An inline policy written in AWS policy text that limits the secret's permissions, thereby helping you follow the principle of least privilege. The inline policy is added to the dynamic secret when the secret is created in AWS. |
  | annotations | array of JSON objects | no | name:value key pairs that define the secret attributes: **name** - The name of the attribute, Maximum length: 60 characters, Allowed characters: A-Z, a-z, 0-9, - (hyphen), _ (underscore), / (forward slash), **value** - The value of the attribute, Maximum length: 120 characters, Allowed characters: All except < and >. |
  | permissions | array of JSON objects | no | Permissions given to users, workloads, and/or groups to access the static secret: subject - A key pair representing the resource being given permissions to access the secret: id - The absolute path to the resource being given access to the secret, Maximum length: 500 characters, Allowed characters: A-Z, a-z, 0-9, - (hyphen), _ (underscore), / (forward slash), kind - The type of resource being given access to the secret, Allowed values: user, host, group, privileges -A comma-separated list of permissions given to the resource on the static secret, Allowed values: read, update, execute |
  
  ### Example Request Body
  ```
  {
    "issuer": "my-aws-issuer",
    "ttl": 1800,
    "method": "federation-token",
    "method_params": {
      "region": "us-east-1",
      "inline_policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInstances\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}"
    },
    "annotations": [
      {
        "name": "description",
        "value": "secret to store the aws role for ..."
      }
    ],
    "permissions": [
      {
        "subject": {
          "id": "data/bruno/api-testing/api-testing-host-group",
          "kind": "host"
        },
        "privileges": [
          "read"
        ]
      }
    ]
  }
  ```
  
  ### Response
  
  #### Response Header
  Includes the following Content-Type response header, which indicates that the API belongs to Conjur Cloud API v2, and that the body is a JSON object
  | Response Header | Field Definition |
  | :-- | :-- |
  | Content-Type | application/x.secretsmgr.v2+json |
  
  #### Status Codes 
  | Code | Description |
  | :-- | :-- |
  | 200 | The dynamic secret was updated |
  | 400 | Invalid Request |
  | 401 | Not Authorized | 
  | 403 | The authenticated user doesn't have the necessary permission to perform this action |
  | 404 | Couldn't find the specified secret |
  | 422 | The request couldn't be processed |
  | 500 | Internal server error |
  
  #### 200 Updated
  ```
  {
    "branch": "/data/dynamic",
    "name": "api-dyn-secret",
    "issuer": "my-aws-issuer",
    "ttl": 900,
    "method": "federation-token",
    "method_params": {
      "region": "us-east-1",
      "inline_policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInstances\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}"
    },
    "annotations": [
      {
        "name": "description",
        "value": "updated annotation"
      }
    ],
    "permissions": [
      {
        "subject": {
          "id": "data/bruno/api-testing/api-testing-host-group",
          "kind": "group"
        },
        "privileges": [
          "read"
        ]
      }
    ]
  }
  ```
  
  #### 400 Bad Request
  ```
  {
    "error": {
      "code": "bad_request",
      "message": "CONJ00194W The api belongs to v2 APIs but it missing the version \"application/x.secretsmgr.v2+json\" in the Accept header"
    }
  }
  ```
  
  #### 404 Not Found
  ```
  {
    "error": {
      "code": "not_found",
      "message": "Variable 'data/dynamic/api-dyn-secret1' not found in account 'conjur'",
      "target": "variable",
      "details": {
        "code": "not_found",
        "target": "id",
        "message": "conjur:variable:data/dynamic/api-dyn-secret1"
      }
    }
  }
  ```
  
  #### 409 Conflict
  ```
  {
    "error": {
      "code": "conflict",
      "message": "secret 'conjur:variable:data/dynamic/api-dyn-secret' already exists",
      "target": "secret",
      "details": {
        "code": "conflict",
        "target": "id",
        "message": "conjur:variable:data/dynamic/api-dyn-secret"
      }
    }
  }
  ```
  
  #### 422 Unprocessable Entity
  ```
  {
    "error": {
      "code": "unprocessable_entity",
      "message": "The TTL defined for dynamic secret 'data/dynamic/api-dyn-secret' (method=federation token) is out of the allowed range: 900-43,200 seconds."
    }
  }
  ```
}
