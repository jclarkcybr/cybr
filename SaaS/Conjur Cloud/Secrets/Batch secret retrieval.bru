meta {
  name: Batch secret retrieval
  type: http
  seq: 3
}

get {
  url: https://{{identityTenantName}}.secretsmgr.cyberark.cloud/api/secrets?variable_ids=conjur:variable:{{secret_1_identifier}},conjur:variable:{{secret_2_identifier}}
  body: formUrlEncoded
  auth: none
}

query {
  variable_ids: conjur:variable:{{secret_1_identifier}},conjur:variable:{{secret_2_identifier}}
}

vars:pre-request {
  secret_1_identifier: data%2Fexample%2Fsecret1
  secret_2_identifier: data%2Fexample%2Fsecret2
}

assert {
  res.status: eq 200
}

script:pre-request {
  const conjurTokenAuth = require('./tools/conjurTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings conjurTokenAuth.js tools
  await conjurTokenAuth.conjurLogin();
  
  // Sets identifier for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('secret_1_identifier', bru.getEnvVar('testConjurCloudSecretId1'));
    bru.setVar('secret_2_identifier', bru.getEnvVar('testConjurCloudSecretId2'));
    tools.log('Secret 1 Identifier: ' + bru.getVar('secret_1_identifier'))
    tools.log('Secret 2 Identifier: ' + bru.getVar('secret_2_identifier'))
  }
}

docs {
  ## Batch secret retrieval
  Fetches multiple secret values in one invocation. Itâ€™s faster to fetch secrets in batches than to fetch them one at a time.
  
  > **NOTE**
  > - Entity IDs must be URL-Encoded
  > - Not supported for dynamic secret stores
  
  ### URL
  https://<subdomain>.secretsmgr.cyberark.com/api/secrets?variable_ids=conjur:variable:secret1,conjur:variable:secret2
  
  ### Resource Information
  | HTTP Method | GET |
  | :-- | :-- |
  
  ### Header Parameters
  | Parameter | Description |
  | :-- | :-- |
  | Content Type | application/x-www-form-urlencoded  |
  
  ### Example URI
  > GET /api/secrets?variable_ids=conjur:variable:secret1,conjur:variable:secret2
  
  #### URI Parameters
  | Parameter | Type | Mandatory | Description |
  | :-- | :-- | :-- | :-- |
  | variable_ids | array | yes | Comma-delimited resource IDs of the variables. **Example:** conjur:variable:secret1,conjur:variable:secret2 |
  
  #### URL-Encoded Examples
  | Identifier | URL-encoded |
  | :-- | :-- |
  | data/myapp-01 | data%2Fmyapp-01 |
  | alice@example.com | alice%40example.com |
  | data/prod/aws/db-password | data%2Fprod%2Faws%2Fdb-password |
  | data/research+development | data%2Fresearch%2Bdevelopment |
  | data/sales&marketing | data%2Fsales%26marketing|
  
  ### Example Responses
  #### Success (Content-Type: application/json)
  ```
  {
    "conjur:variable:data/bruno/api-secret-1": "c2e60d1d2126074",
    "conjur:variable:data/bruno/api-secret-2": "a2b60d3d2126074"
  }
  ```
  #### 404 Error response
  ```
  {
    "error": {
      "code": "not_found",
      "message": "CONJ00076E Variable conjur:variable:data/example/secret is empty or not found."
    }
  }
  ```
  
  ### Status Codes 
  | Code | Description |
  | :-- | :-- |
  | 200 | All secret values were retrieved successfully |
  | 401 | The request lacks valid authentication credentials. | 
  | 403 | The authenticated user lacks the necessary privilege. |
  | 404 | The variable does not exist, or it does not have any secret values. |
  | 422 | A request parameter was missing or invalid. |
}
