meta {
  name: Retrieve a Secret
  type: http
  seq: 2
}

get {
  url: https://{{identityTenantName}}.secretsmgr.cyberark.cloud/api/secrets/conjur/{{kind}}/{{identifier}}?version=1
  body: formUrlEncoded
  auth: none
}

query {
  version: 1
}

vars:pre-request {
  kind: variable
  identifier: data%2Fprod%2Fdb%2Fpassword
}

assert {
  res.status: eq 200
}

script:pre-request {
  const conjurTokenAuth = require('./tools/conjurTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings conjurTokenAuth.js tools
  await conjurTokenAuth.conjurLogin();
  
  // Sets identifier for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('identifier', bru.getEnvVar('testConjurCloudSecretId1'));
    tools.log('Identifier: ' + bru.getVar('identifier'))
  }
}

docs {
  ## Retrieve a secret
  Fetches the value of a secret from the specified variable. The latest version will be retrieved unless the version parameter is specified. The twenty most recent secret versions are retained.
  
  The secret data is returned in the response body.
  > **NOTE**
  > you to add a secret to any resource, but best practice is to store and retrieve secret data only using variable resources.
  
  ## URL
  https://<subdomain>.secretsmgr.cyberark.com/api/secrets/conjur/{kind}/{identifier}?version=1
  
  ### Resource Information
  | HTTP Method | GET |
  | :-- | :-- |
  
  ### Header Parameters
  | Parameter | Description |
  | :-- | :-- |
  | Content Type | application/x-www-form-urlencoded  |
  
  ### Example Responses
  #### Standard Secret (Content-Type: application/octet-stream)
  ```
  "EXAMPLESECRET"
  ```
  #### Dynamic Secret (Content-Type: application/json)
  ```
  {
    "id": "b549465d-140b-475e-ada3-bc50e07d09da",
    "ttl": 1000,
    "data": {
      "access_key_id": "ASIATPD7AGKZWELYL6ET",
      "secret_access_key": "PleTNFflGV1Vz18gFW/jsOzyyq/U3PNGpeIfxwCR",
      "session_token": "IQoJb3J...3QcGAPoPc0BOtQn+5gfFpq8eHYr0zyBdifGERWtV0CZbqdzFzR",
      "federated_user_id": "238637036211:conjur,host,data.my-app",
      "federated_user_arn": "arn:aws:sts::238637036211:federated-user/conjur,host,data.my-app"
    }
  }
  ```
  #### 404 Error response
  ```
  {
    "error": {
      "code": "not_found",
      "message": "CONJ00076E Variable conjur:variable:data/example/secret is empty or not found."
    }
  }
  ```
  
  
  ### Status Codes 
  | Code | Description |
  | :-- | :-- |
  | 200 | The secret values was retrieved successfully. A response for a dynamic secret includes the ID of the secret, the TTL value, details about the secrets, based on the type of issuer and the method used to create the secret. For AWS: Federation token method returns federated_user_arn and federated_user_id Assumed role method returns assumed_role_user_id and assumed_role_user_arn |
  | 401 | The request lacks valid authentication credentials. | 
  | 403 | The authenticated user lacks the necessary privilege. |
  | 404 | The variable does not exist, or it does not have any secret values. |
  | 422 | A request parameter was missing or invalid. |
}
