meta {
  name: Ad Hoc Connect Using PSM
  type: http
  seq: 11
}

post {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/accounts/AdHocConnect/
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "UserName":"{{pasAdHocUserName}}",
    "Secret": "{{pasAdHocSecret}}",
    "Address": "{{pasAdHocAddress}}",
    "PlatformId": "{{pasAdHocPlatformId}}",
    "extraFields": {
      "LogonDomain": "{{pasAdHocLogonDomain}}"
    },
    "PSMConnectPrerequisites": {
      "ConnectionComponent": "PSM-RDP",
      "ConnectionType": "PSMGW",  // RDPFile or PSMGW
      "reason": "Bruno API Example",
      "ticketingSystemName": null,
      "ticketId": null
    }
  }
}

vars:pre-request {
  pasUserName: example@cyberark.com
  pasLogonDomain: EXAMPLE
  pasAdHocAddress: example.cyberark.com
  pasAdHocSecret: exampleSecret123!@#
  pasAdHocPlatformId: PSMSecureConnect
}

assert {
  res.status: eq 200
  res.body: isJson
}

script:pre-request {
  // Perform authentication usings platformToken.js tools
  const platformTokenAuth = require('./tools/platformTokenAuth');
  await platformTokenAuth.login();
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  if (res.status != 200) {
    tools.log('Error Code: ' + res.body.ErrorCode);
    tools.log('Error Message: ' + res.body.ErrorMessage);
    if (res.body.Details) {
      tools.log('Details Error Code: ' + res.body.Details[0].ErrorCode);
      tools.log('Details Error Message: ' + res.body.Details[0].ErrorMessage);
      tools.log('Details Parameter Name: ' + res.body.Details[0].ParameterName);
    }
  }
}

docs {
  This method allows you to connect through PSM without using an existing account, by returning settings that can be used with an RDP client application.
  
  You must enable Privileged Session Monitoring and ad-hoc connection via Privilege Cloud Portal configuration.
  
  Sample Success:
  {
    "PSMGWURL": "https://webaccess-example.privilegecloud.cyberark.cloud/guac/direct",
    "PSMGWRequest": "eyJ1c2VybmFtZSI6IlBTTUBmNDExYTUyZi03ODZiLTQ3MzMtYTc2Mi1hNjE4YWUzYmZkYzgiLCJob3N0bmFtZSI6IkNPTk5FQ1RPUi5waW5lYXBwbGVkZXYubG9jYWwiLCJwb3J0IjoiMzM4OSIsInRpdGxlIjoie3twYXNBZEhvY1VzZXJOYW1lfX0gb24gZXhhbXBsZS5jeWJlcmFyay5jb20gUFNNLVJEUCIsImp3dCI6ImV5SmhiR2NpT2lKRlV6STFOaUlzSW5SNWNDSTZJa3BYVkNJc0ltdHBaQ0k2SWpnNVlUWXpZemxpTFdZMll6RXRNVEZsWlMwNE0yUTFMVEV5TWpsbFpHTTBaRGczTVNKOS5leUpwYzNNaU9pSlFWbGRCTFRNMU1DSXNJbWxoZENJNk1UY3hNamcwTWpnNU55d2laWGh3SWpveE56RXlPRFF5T1RVM0xDSmEXAMPLEbERaVTVNWmtRNVJUVmljMlpKVG5OUWR5SXNJbTVoYldVaU9pSnpkbU5mY21WemRGOWhjR2tpTENKbmFYWmxibDl1WVcxbElqb2ljM1pqWDNKbGMzUmZZWEJwSWl3aVJYaDBaWEp1WVd4VmRXbGtJam9pTXpZek9HSTFNVFF0TldRM01DMDBNalkwTFdJM1lqWXRNVFZpTVRjMk4ySTROekF5SW4wLmp2QjhxNFpTNXgxazZZWGJlVUN6Z1lkeXR3aVJoSGdZSUQ3RHA0QmtUWm1BTjNrR1ZvVllJc2JYeEVEdGdYMUp2LW1pUzkxNEoybTQ4YTFTbi1LcWFtSzFESXJ6bG9JTzh0UnZhT1NKeTc4M0NrYWtIdXhwT0dyMV9CaHg0bl9wQkVUXzdKS3huNUJjWFVuNDl3ajFMaTZlQkQ4U3F0ek04aFl5Y2s1aHN4WHpnR2preHk0MDVBa0p1am0yTklXSU9tdF94Q2NlRGhmWEd2bWZYNVJXa0R1VC1NclJ5YUxmQjZqemRkRTBhLXRYRDA3dTlaeXYxdEpTZi1pRTRWNGlyVTJOeENJVFZnei0yelctOWpJYWZ3b3F5eU1IZDhLRE9ZZC1iZF9PN1RfNTVuOFFzVkNTM1NJeS1lLVp0MFBBNVlPTjZNQUotSzZWdHJSMzY3NmxwQSJ9"
  }
  
  Sample Error - 400 Bad Request:
  {
    "Details": [
      {
        "ErrorCode": "PASWS011E",
        "ErrorMessage": "Missing mandatory parameter [userName].",
        "ParameterName": "userName"
      }
    ],
    "ErrorCode": "PASWS167E",
    "ErrorMessage": "There are some invalid parameters"
  }
}
