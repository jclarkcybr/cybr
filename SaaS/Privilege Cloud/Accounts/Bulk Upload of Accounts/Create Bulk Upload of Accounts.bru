meta {
  name: Create Bulk Upload of Accounts
  type: http
  seq: 1
}

post {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/bulkactions/accounts/
  body: json
  auth: none
}

body:json {
  {  
    "source":"example.csv",
    "accountsList": [
      {
        "uploadIndex": "1",
        "address": "example.com",
        "username": "BulkAccount1",
        "platformId": "{{pasPlatformName}}",
        "safeName": "{{pasSafeName}}",
        "secret": "PassWord123!@#",
        "platformAccountProperties": {
          "LogonDomain": "EXAMPLE"
        },
        "secretManagement": {
          "automaticManagementEnabled": false,
          "manualManagementReason": "Example management disabled"
        },
        "remoteMachinesAccess": {
          "remoteMachines": "192.168.19.10",
          "accessRestrictedToRemoteMachines": true
        }
      },
      {
        "uploadIndex": "2",
        "address": "example.com",
        "username": "BulkAccount2",
        "platformId": "{{pasPlatformName}}",
        "safeName": "{{pasSafeName}}",
        "secret": "PassWord123!@#",
        "platformAccountProperties": {
          "LogonDomain": "EXAMPLE"
        },
        "secretManagement": {
          "automaticManagementEnabled": false,
          "manualManagementReason": "Example management disabled"
        },
        "remoteMachinesAccess": {
          "remoteMachines": "192.168.19.10",
          "accessRestrictedToRemoteMachines": true
        }
      }
    ]
  }
}

assert {
  res.status: eq 202
  res.body: isNumber
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
  
  // Sets Safe Name, Account Name for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('pasSafeName', bru.getEnvVar('testSafeName'));
    bru.setVar('pasPlatformName', bru.getEnvVar('testPlatformName'));
    tools.log('Safe Name: ' + bru.getVar('pasSafeName'));
    tools.log('Platform Name: ' + bru.getVar('pasPlatformName'));
  }
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  // Sets Bulk Id for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('pasBulkId', res.body);
    tools.log('Bulk Id: ' + bru.getVar('pasBulkId'));
  }
  
  if (res.status != 200) {
   if (res.body.Message) {
      tools.log('Message: ' + res.body.Message);
    }
    if (res.body.ErrorCode) {
      tools.log('Error Code: ' + res.body.ErrorCode);
    }
    if (res.body.ErrorMessage) {
      tools.log('Error Message: ' + res.body.ErrorMessage);
    }
    if (res.body.Details) {
      tools.log('Details Error Code: ' + res.body.Details[0].ErrorCode);
      tools.log('Details Error Message: ' + res.body.Details[0].ErrorMessage);
      tools.log('Details Parameter Name: ' + res.body.Details[0].ParameterName);
    }
  }
  
}

docs {
  This method allows a developer to add multiple accounts to existing Safes. The response contains the ID of the bulk account upload that was performed.
  
  Note:
    - This option is only available if you have Add accounts, Update account content, and Update account properties authorization in at least one Safe.
}
