meta {
  name: Link an Account
  type: http
  seq: 1
}

post {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/accounts/{{pasAccountId}}/LinkAccount/
  body: json
  auth: none
}

body:json {
  {
    "safe": "{{pasLinkedSafeName}}",
    "extraPasswordIndex": "{{pasExtraPasswordIndex}}", // <1|2|3>
    "name": "{{pasLinkedAccountName}}",
    "folder": "{{pasFolder}}"
  }
}

vars:pre-request {
  pasFolder: Root
  pasExtraPasswordIndex: 1
}

assert {
  res.status: eq 200
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
  
  // Sets Safe Name, Account Name for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('pasAccountId', bru.getEnvVar('testPrivilegeCloudAccountId'));
    bru.setVar('pasLinkedSafeName', bru.getEnvVar('testSafeName'));
    bru.setVar('pasLinkedAccountName', bru.getEnvVar('testPrivilegeCloudLinkedAccountName'));
    tools.log('Account Id: ' + bru.getVar('pasAccountId'));
    tools.log('Safe Name: ' + bru.getVar('pasLinkedSafeName'));
    tools.log('Linked Account Name: ' + bru.getVar('pasLinkedAccountName'));
  }
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  if (res.status != 200) {
   if (res.body.Message) {
      tools.log('Message: ' + res.body.Message);
    }
    if (res.body.ErrorCode) {
      tools.log('Error Code: ' + res.body.ErrorCode);
    }
    if (res.body.ErrorMessage) {
      tools.log('Error Message: ' + res.body.ErrorMessage);
    }
    if (res.body.Details) {
      tools.log('Details Error Code: ' + res.body.Details[0].ErrorCode);
      tools.log('Details Error Message: ' + res.body.Details[0].ErrorMessage);
      tools.log('Details Parameter Name: ' + res.body.Details[0].ParameterName);
    }
  }
}

docs {
  This method enables a user to associate a linked account to an existing source account. The linked account can be a Reconcile account, Logon account, or other type of linked account that is defined in the platform configuration.
  
  Note:
    - The type of linked accounts that are allowed are determined by the Platform settings. Each platform can support different types of linked accounts.
  
  To run this service, the user must have the following Safe member authorizations:
    - List accounts - For both the Safe of the linked account and the Safe of the source account
    - Update account properties - For the Safe of the source account
}
