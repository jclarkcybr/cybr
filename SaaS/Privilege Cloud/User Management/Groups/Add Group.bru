meta {
  name: Add Group
  type: http
  seq: 2
}

post {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/usergroups
  body: json
  auth: none
}

query {
  ~includeMembers: true
}

body:json {
  {
      "groupName": "unique-group-name",
      "description": "The users in this group all have the same authorizations",
      "location": "{{pasFolder}}"
  }
}

vars:pre-request {
  pasFolder: '\\'
}

assert {
  res.status: eq 201
  res.body: isJson
  res.body.id: isNumber
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
}

script:post-response {
  const tools = require('./tools/tools');
  
  // Sets User ID for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('pasGroupId', res.body.id);
    tools.log('Group Id: ' + bru.getVar('pasGroupId'))
  }
  
  // Log on error
  if (res.status != 201) {
    if (res.body.Message) {
      tools.log('Message: ' + res.body.Message);
    }
    if (res.body.ErrorCode) {
      tools.log('Error Code: ' + res.body.ErrorCode);
    }
    if (res.body.ErrorMessage) {
      tools.log('Error Message: ' + res.body.ErrorMessage);
    }
    if (res.body.Details) {
      tools.log('Details Error Code: ' + res.body.Details[0].ErrorCode);
      tools.log('Details Error Message: ' + res.body.Details[0].ErrorMessage);
      tools.log('Details Parameter Name: ' + res.body.Details[0].ParameterName);
    }
  }
}

docs {
  This method adds a new group.
  
  To run this Web service, you must have the following permissions:
    - Add Users
    - Update Users
}
