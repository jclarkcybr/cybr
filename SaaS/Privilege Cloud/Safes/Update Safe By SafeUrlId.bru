meta {
  name: Update Safe By SafeUrlId
  type: http
  seq: 4
}

put {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/safes/{{pasSafeUrlId}}
  body: json
  auth: none
}

body:json {
  {
    "safeName": "{{pasSafeUrlId}}",
    "safeNumber": "{{pasSafeNumber}}",
    "description": "New Description",
    "location": "{{pasFolder}}",
    "creator": {
      "id": "3638b514-5d70-4264-b7b6-15b1767b8702",
      "name": "svc_rest_api@cyberark.cloud.3558"
    },
    "olacEnabled": false,
    "managingCPM": "{{pasCPMName}}",
    "numberOfVersionsRetention": null,
    "numberOfDaysRetention": 0
  }
}

vars:pre-request {
  pasFolder: 
  pasCPMName: example
}

assert {
  res.status: eq 200
  res.body: isJson
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
  
  // Sets pasSafeMemberName for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('pasSafeUrlId', bru.getEnvVar('testSafeNameAction'));
    bru.setVar('pasCPMName', bru.getEnvVar('testCpmName'));
    tools.log('SafeName: ' + bru.getVar('pasSafeUrlId'))
    tools.log('CPM Name: ' + bru.getVar('pasCPMName'))
  }
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  if (res.status != 200) {
    tools.log('Error Code: ' + res.body.ErrorCode);
    tools.log('Error Message: ' + res.body.ErrorMessage);
  }
}

docs {
  This method updates a single Safe in the Vault.
  
  The user who runs this web service must have Manage Safes permissions in the Vault and View Safe Members permissions in the Safe.
  
}
