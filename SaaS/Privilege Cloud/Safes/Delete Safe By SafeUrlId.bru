meta {
  name: Delete Safe By SafeUrlId
  type: http
  seq: 5
}

delete {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/safes/{{pasSafeUrlId}}
  body: json
  auth: none
}

body:json {
  {
      "SafeName": "{{pasSafeName}}",
      "Description": "Desc1",
      "OLACEnabled": false,
      "ManagingCPM": "{{pasCPMName}}",
      "NumberOfVersionsRetention": null,
      "NumberOfDaysRetention": 0,
      "AutoPurgeEnabled": false,
      "Location": "{{pasFolder}}"
  }
}

vars:pre-request {
  pasSafeUrlId: example-safe
}

assert {
  res.status: eq 204
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
  
  // Sets pasSafeMemberName for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('pasSafeUrlId', bru.getEnvVar('testSafeNameAction'));
    tools.log('SafeName: ' + bru.getVar('pasSafeUrlId'))
  }
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  // Log on error
  if (res.status != 204) {
    if (res.body.Message) {
      tools.log('Message: ' + res.body.Message);
    }
    if (res.body.ErrorCode) {
      tools.log('Error Code: ' + res.body.ErrorCode);
    }
    if (res.body.ErrorMessage) {
      tools.log('Error Message: ' + res.body.ErrorMessage);
    }
    if (res.body.Details) {
      tools.log('Details Error Code: ' + res.body.Details[0].ErrorCode);
      tools.log('Details Error Message: ' + res.body.Details[0].ErrorMessage);
      tools.log('Details Parameter Name: ' + res.body.Details[0].ParameterName);
    }
  }
}

docs {
  This method deletes a Safe from the Vault.
  
  The user who runs this web service requires Manage Safe permissions on the required Safe.
}
