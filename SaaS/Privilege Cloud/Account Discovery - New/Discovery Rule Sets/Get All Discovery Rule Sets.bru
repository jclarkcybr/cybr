meta {
  name: Get All Discovery Rule Sets
  type: http
  seq: 1
}

get {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/api/discovery-rule-sets
  body: none
  auth: none
}

query {
  ~offset: 0
  ~limit: 50
  ~sort: id - asc
  ~search: example
}

assert {
  res.status: eq 200
  res.body: isJson
  res.body.totalCount: isNumber
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  // Sets Discovered Rule Set for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    if (res.body.items[0]) {
      tools.log('Setting Variables');
      bru.setVar('pasRuleSetId', res.body.items[0].id);
      tools.log('Rule Set Id: ' + bru.getVar('pasRuleSetId'))
    }
  }
  
  // Log on error
  if (res.status != 200) {
    if (res.body.Message) {
      tools.log('Message: ' + res.body.Message);
    }
    if (res.body.ErrorCode) {
      tools.log('Error Code: ' + res.body.ErrorCode);
    }
    if (res.body.ErrorMessage) {
      tools.log('Error Message: ' + res.body.ErrorMessage);
    }
    if (res.body.Details) {
      tools.log('Details Error Code: ' + res.body.Details[0].ErrorCode);
      tools.log('Details Error Message: ' + res.body.Details[0].ErrorMessage);
      tools.log('Details Parameter Name: ' + res.body.Details[0].ParameterName);
    }
  }
}

docs {
  This method returns information about all the defined discovery rule sets.
}
