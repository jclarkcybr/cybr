meta {
  name: Add a Discovery Rule Set
  type: http
  seq: 3
}

post {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/api/discovery-rule-sets
  body: json
  auth: none
}

body:json {
  {
    "name": "Bru Rule Set Example",
    "trigger": {
      "type": "ACCOUNT_DISCOVERED",
      "conditions": [
        {
          "property": "type",
          "operator": "EQUALS",
          "value": "windows"
        },
        {
          "property": "hostname",
          "operator": "STARTS_WITH",
          "value": "bru"
        }
      ]
    },
    "rules": [
      {
        "name": "Rule 1",
        "conditions": [
          {
            "property": "subType",
            "operator": "EQUALS",
            "value": "loosely"
          },
          {
            "property": "isPrivileged",
            "operator": "EQUALS",
            "value": "false"
          }
        ],
        "action": {
          "type": "ONBOARD",
          "parameters": {
            "platformId": "{{pasPlatformName}}",
            "safeName": "{{pasSafeName}}"
          },
          "subActions": [
            {
              "type": "RESET",
              "parameters": {
                "reset": true
              }
            }
          ]
        }
      },
      {
        "name": "Rule 2",
        "conditions": [
          {
            "property": "source",
            "operator": "EQUALS",
            "value": "discovery management"
          },
          {
            "property": "network",
            "operator": "STARTS_WITH",
            "value": "bru"
          }
        ],
        "action": {
          "type": "ONBOARD",
          "parameters": {
            "platformId": "{{pasPlatformName}}",
            "safeName": "{{pasSafeName}}"
          },
          "subActions": []
        }
      }
    ],
    "status": "DRAFT"
  }
}

vars:pre-request {
  pasPlatformName: example-platform
  pasSafeName: example-safe
}

assert {
  res.status: eq 201
  res.body: isJson
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
  
  // Sets Safe Name and Platform Name for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('pasSafeName', bru.getEnvVar('testSafeName'));
    bru.setVar('pasPlatformName', bru.getEnvVar('testPlatformName'));
    tools.log('Safe Name: ' + bru.getVar('pasName'))
    tools.log('Platform Name: ' + bru.getVar('pasPlatformName'))
  }
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  // Sets Discovered Rule Set for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    if (res.body) {
      tools.log('Setting Variables');
      bru.setVar('pasRuleSetId', res.body.id);
      tools.log('Rule Set Id: ' + bru.getVar('pasRuleSetId'))
    }
  }
  
  // Log on error
  if (res.status != 201) {
    if (res.body.Message) {
      tools.log('Message: ' + res.body.Message);
    }
    if (res.body.ErrorCode) {
      tools.log('Error Code: ' + res.body.ErrorCode);
    }
    if (res.body.ErrorMessage) {
      tools.log('Error Message: ' + res.body.ErrorMessage);
    }
    if (res.body.Details) {
      tools.log('Details Error Code: ' + res.body.Details[0].ErrorCode);
      tools.log('Details Error Message: ' + res.body.Details[0].ErrorMessage);
      tools.log('Details Parameter Name: ' + res.body.Details[0].ParameterName);
    }
  }
}

docs {
  This method adds a new discovery rule set that defines an action for specific discovered accounts.
  
  Any account that matches the rule set conditions is automatically handled according to the action that is defined in the rule set.
  
  Currently, the rule set onboards the matched account. At the time of onboarding, the matching accounts are added to the defined safe and platform.
}
