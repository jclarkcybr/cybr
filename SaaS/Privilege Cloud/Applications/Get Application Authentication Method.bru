meta {
  name: Get Application Authentication Method
  type: http
  seq: 6
}

get {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/WebServices/PIMServices.svc/Applications/{{pasAppId}}/Authentications
  body: none
  auth: none
}

vars:pre-request {
  pasAppId: example-app
}

assert {
  res.status: eq 200
  res.body: isJson
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
  
  // Set pasAppId for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('pasAppId', bru.getEnvVar('testPrivilegeCloudAppId'));
    tools.log('Application Id: ' + bru.getVar('pasAppId'))
  }
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  // Log on error
  if (res.status != 200) {
    if (res.body.Message) {
      tools.log('Message: ' + res.body.Message);
    }
    if (res.body.ErrorCode) {
      tools.log('Error Code: ' + res.body.ErrorCode);
    }
    if (res.body.ErrorMessage) {
      tools.log('Error Message: ' + res.body.ErrorMessage);
    }
    if (res.body.Details) {
      tools.log('Details Error Code: ' + res.body.Details[0].ErrorCode);
      tools.log('Details Error Message: ' + res.body.Details[0].ErrorMessage);
      tools.log('Details Parameter Name: ' + res.body.Details[0].ParameterName);
    }
  }
  
  // Save Application Auth Id in Session Collection
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar("pasAppAuthId", res.body.authentication[0].authID)
    tools.log('App Authentication Id: ' + bru.getVar('pasAppAuthId'))
  }
}

docs {
  This method returns information about all the authentications methods of a specific application.
  
  The user who runs this web service requires Audit Users permissions in Privilege Cloud.
}
